terraform is an open source ,IAC TOOL , developed created by Hashicorp ans writen in Go programming langgage
iac  is a process of managing infrastucture in a file or files rather than doing from UI
HERE resources are nothing but VM,Elastic ip SG ,networking interface
terraform code is writen in the HCL hashicorp with the files end with Extension .tf
it spports with aws,azure ,gcp others we can write any scrip with terraform
terraform provides in google 
terraform /cloud formation 
terraform developed in hcl and workes for all cloud provides and fully compatible with JSON 
cloud formation is developed by aws it supports only to aws utlizes JSONor YAML it had a limt 51000 bytes for the template 

#to instal install one ec2 instance 
install  wget unzip vim pacakage 
#downloded terraorm  
#go to google serch terraform downlod copy link adress 
#wget link address 64bite dont use arm or install terraform for linux use commands 
#before that go to opt directory 
cd /opt  
run  downlode commands
unzip terraform file  -d /usr/local/bin/    ====to extarct 
terraform -v  ====to check the vertion 
#create IAM user   go to iam console 
user ==terrafform = programatic acess ==next create user 
will get access key and screate key  or we will provide arole to ec2 instance 
#terraform can be exicted by normal user ec2user not only root
#create a dirctory  ===== mkdir terraform 1st 
# go inside dirctory === cd terraform 1st
# pwd
vi 01_terraform script .tf == to create file 
terraform init ====wihout this command we canot sxicute other commands from this .terraform will create 
terraform FMT ======= it will rewrite and correct intentation 0r format 
terraform validate ==== syntax errors 
terraform plan ======= dry run  what things 
403 http no enogh permisstions  forbiden ec2 full access 
terraform apply -auto-approve ===   to create 
terraform apply  ==== to modyfy  or changing instance type or other things
terraform destroy ====   to remove 
once we run terraform file it will create terraform .tfstate terraform.tfstate.backup fle so it will n ot allow to create once agine
terraform.tf statefile we are going to keep in centralized cloud  terraform cloud
tfE=terraform entierprice ,github, S3, bitbuket
normally we create sepate folder and file  and keep  for provider provider.tf
and one more file for resoruce === main.tf file 
what and all we runned everthing info will be in backup stae file 

#VARIABLES
the project has more variables it is difficult to maintain all in terrafor scrip we will keep in 1 file 
Name : vars.tf
in place of valuve add variables
count = "${var.numberofinstance}"
instance_type = "${var.instance type}"
ami  = "${var.ami}"

#default values it will take it is posible to pass the valuves dynamicaly
terraform apply -auto approve -var numberofinstace"2"

# rename instance name
Name = "ec2instance by terraform - ${count.index}" ===it give count from 0 

comments
it supports 3 differnt syntaxes for comments
single line   ===   #  or  //
multiline ====  /*   or  */





#create one folder in desktop  use visualstudio  code expler ---open folder ==== desktop ==== terraform folder ==
create a file clik + first terraform script.tf
k sensitive keep in lower case 
provider "aws"{
    region ="ap-south-1"
    access_key = "hdfejjbbcjwkj"
    secreate_key = "hjwtdw6dhhagi67awhd"
}

resource "aws_instance" "awsec2instance or anyname"{
  count = "3' to keep how many instance we need like 
  ami = "ami-3464uughtht6"
  instance_type = "t2.micro"
  security_groups = ["launch-wizard-2', sg3 "]
  key_name        = "devops"
  tags = {
    Name = "ec2instance by terraform"

  }
} 
*only Name capse 
*security_groups = ["launch-wizard-2', sg3 "] ==== we can add many by ading , and within [] 

Variable
var.tf
variable "ami"{
 description = this variable having the ami valu"
 default = "ami-73ghdfsbnddnnm"
}

variable "instance type"{
 description = this variable having the instance type"
 default = "t2.micro"
}

variable "Numberofinstance"{
 description = this variable having the instance count"
 default = "4"
}
